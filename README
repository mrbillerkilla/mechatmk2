# Mechatmk2

## Overzicht
Mechatmk2 is een Node.js-gebaseerde applicatie die gebruik maakt van Express.js, Socket.IO en een database-architectuur om real-time communicatie en dataverwerking mogelijk te maken. Dit project is ontworpen voor toepassingen waarbij snelle en efficiënte gegevensuitwisseling vereist is.

## Functionaliteiten
- **Real-time communicatie** met behulp van Socket.IO
- **RESTful API** via Express.js voor gegevensbeheer
- **Database-integratie** voor opslag en ophalen van gegevens
- **Modulair en schaalbaar** dankzij een MVC-architectuur
- **Ondersteuning voor bestandsuploads**

## Projectstructuur

```
mechatmk2/
│-- app.js                 # Hoofdapplicatiebestand
│-- db.js                  # Databaseconfiguratie
│-- .env                   # Omgevingsvariabelen voor de database connectie
│-- package.json           # Projectafhankelijkheden
│-- package-lock.json      # Geïnstalleerde pakketen
│-- controllers/           # proces logica
│-- models/                # Database modellen
│-- routers/               # API-routes
│-- sockets/               # WebSocket-logica
│-- view/                  # Frontend gerelateerde bestanden
│-- uploads/               # Bestandsopslag voor foto's en videos
│-- LICENSE                # Licentie-informatie
```

## Installatie
1. **Kloon de repository:**
   ```
   git clone https://github.com/mrbillerkilla/mechatmk2.git
   ```
2. **Installeer de afhankelijkheden:**
   ```
   npm install
   ```
3. **Configureer de `.env`-variabelen**
4. **Start de applicatie:**
   ```
   node app
   ```

## Bronnen
Hier is een uitgebreide lijst van bronnen die gebruikt zijn voor de ontwikkeling van dit project, inclusief specifieke documentatiepagina's:

- **Node.js & Express.js:** [Routing documentatie](https://expressjs.com/en/guide/routing.html) - Hoe routes werken binnen Express.js.
- **Socket.IO:** [Realtime communicatie](https://socket.io/docs/v4/) - Hoe WebSockets worden beheerd.
- **MongoDB:** [CRUD-operaties](https://www.mongodb.com/docs/manual/crud/) - Hoe je data kunt opslaan en ophalen.
- **Mongoose:** [Schema's en modellen](https://mongoosejs.com/docs/models.html) - Hoe je schema's definieert in MongoDB.
- **dotenv:** [Omgevingsvariabelenbeheer](https://www.npmjs.com/package/dotenv) - Hoe `.env` bestanden worden gebruikt.
- **bcrypt:** [Wachtwoord hashing](https://www.npmjs.com/package/bcrypt) - Hoe je wachtwoorden veilig opslaat.
- **Express-validator:** [Validatieregels](https://express-validator.github.io/docs/) - Hoe input-validatie werkt.
- **CORS:** [Cross-origin requests](https://www.npmjs.com/package/cors) - Hoe je externe verzoeken beheert.
- **Multer:** [Bestandsuploads](https://www.npmjs.com/package/multer) - Hoe je bestanden veilig uploadt.
- **Postman:** [API testen](https://learning.postman.com/docs/getting-started/introduction/) - Hoe je API-verzoeken kunt testen.
- **Git & GitHub:** [Versiebeheer](https://git-scm.com/book/en/v2) - Hoe je met Git repositories werkt.
- **Fetch API:** [Werken met HTTP-verzoeken](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch) - Hoe je externe API's aanroept.
- **Event Listeners:** [Gebruikersinteracties beheren](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener) - Hoe je events afvangt.
- **WebSockets:** [Real-time communicatie](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API) - Hoe je real-time data streams gebruikt.
- **MDN Web Docs:** [Webontwikkeling documentatie](https://developer.mozilla.org/) - Algemene en gedetailleerde webtechnologieën.

## Gebruik
Dit project kan gebruikt worden voor:
- **Met vrienden wilt chatten zonder vertraging**
- **Gegevensuitwisseling tussen meerdere gebruikers**
- **Backend voor interactieve webapplicaties**

## Licentie
Dit project valt onder de MIT-licentie. Zie het bestand `LICENSE` voor details.

